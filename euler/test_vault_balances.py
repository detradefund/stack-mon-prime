#!/usr/bin/env python3
"""
Test script pour tester la nouvelle fonctionnalit√© de r√©cup√©ration des balances des vaults
avec balanceOf() et asset() pour chaque subaccount
"""

import os
import sys
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv(dotenv_path=os.path.join(os.path.dirname(__file__), '..', '.env'))

from rpc_vault_client import EulerRPCClient, PRODUCTION_ADDRESS

def test_vault_balances():
    """Test la r√©cup√©ration des balances des vaults avec balanceOf et asset"""
    
    print("üß™ Test de r√©cup√©ration des balances des vaults")
    print("=" * 60)
    
    # V√©rifier la configuration RPC
    ethereum_rpc = os.getenv('ETHEREUM_RPC')
    if not ethereum_rpc:
        print("‚ùå ETHEREUM_RPC n'est pas configur√©")
        print("üí° Configurez ETHEREUM_RPC dans le fichier .env")
        return 1
    
    print(f"üìç Adresse test√©e: {PRODUCTION_ADDRESS}")
    print(f"üåê RPC Ethereum: {ethereum_rpc[:30]}...")
    print("-" * 60)
    
    try:
        # Cr√©er le client RPC
        client = EulerRPCClient()
        
        # Tester la nouvelle m√©thode de r√©cup√©ration des balances
        print("\nüîÑ Test de get_all_vault_balances_for_positions()...")
        result = client.get_all_vault_balances_for_positions()
        
        if result["success"]:
            print(f"\n‚úÖ Test r√©ussi!")
            print(f"üìä R√©sum√© des r√©sultats:")
            print(f"   - Adresse: {result['address']}")
            print(f"   - Total subaccounts: {result['summary']['total_subaccounts']}")
            print(f"   - Total positions: {result['summary']['total_positions']}")
            print(f"   - Total d√©p√¥ts: {result['summary']['total_deposits']}")
            print(f"   - Total emprunts: {result['summary']['total_borrows']}")
            print(f"   - Positions non-nulles: {result['summary']['non_zero_positions']}")
            
            # Afficher les d√©tails des subaccounts
            if result['subaccounts']:
                print(f"\nüìù D√©tails des subaccounts et positions:")
                for subaccount_addr, subaccount_data in result['subaccounts'].items():
                    print(f"\n   üë§ Subaccount: {subaccount_addr}")
                    
                    # Afficher les d√©p√¥ts
                    deposits = subaccount_data['positions']['deposits']
                    if deposits:
                        print(f"      üí∞ D√©p√¥ts ({len(deposits)}):")
                        for deposit in deposits:
                            balance = deposit.get('balance', '0')
                            balance_type = deposit.get('balance_type', 'shares')
                            symbol = deposit.get('symbol', 'Unknown')
                            underlying_balance = deposit.get('underlying_balance')
                            underlying_symbol = deposit.get('underlying_asset_info', {}).get('symbol', 'Unknown')
                            if underlying_balance:
                                print(f"         - {symbol}: {balance} {balance_type} = {underlying_balance} {underlying_symbol}")
                            else:
                                print(f"         - {symbol}: {balance} {balance_type}")
                    
                    # Afficher les emprunts
                    borrows = subaccount_data['positions']['borrows']
                    if borrows:
                        print(f"      üí∏ Emprunts ({len(borrows)}):")
                        for borrow in borrows:
                            balance = borrow.get('balance', '0')
                            balance_type = borrow.get('balance_type', 'debt')
                            symbol = borrow.get('symbol', 'Unknown')
                            underlying_symbol = borrow.get('underlying_asset_info', {}).get('symbol', 'Unknown')
                            print(f"         - {symbol}: {balance} {balance_type} ({underlying_symbol})")
            else:
                print("\n‚ö†Ô∏è  Aucun subaccount trouv√©")
            
        else:
            print(f"\n‚ùå Test √©chou√©: {result.get('error', 'Erreur inconnue')}")
            return 1
        
        print("\n" + "=" * 60)
        print("üéâ Test des balances de vaults termin√© avec succ√®s!")
        
    except Exception as e:
        print(f"\n‚ùå Erreur pendant le test: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0

def main():
    """Point d'entr√©e principal"""
    return test_vault_balances()

if __name__ == "__main__":
    sys.exit(main()) 